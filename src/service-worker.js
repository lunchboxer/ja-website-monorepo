import { build, files, version } from '$service-worker'

// https://github.com/microsoft/TypeScript/issues/11781 - this is needed for TS and ESLint

/// env serviceworker
const globalThis = /** @type {unknown} */ (self)
/// <reference no-default-lib="true"/>
/// <reference lib="es2020" />
/// <reference lib="WebWorker" />
const sw = /** @type {ServiceWorkerGlobalScope & typeof globalThis} */ (
  globalThis
)

const ASSETS = `cache${version}`

// `build` is an array of all the files generated by the bundler,
// `files` is an array of everything in the `static` directory
const toCache = [...build, ...files]
const staticAssets = new Set(toCache)

/** @param {ExtendableEvent} event */
function installListener(event) {
  event.waitUntil(
    caches
      .open(ASSETS)
      .then((cache) => cache.addAll(toCache))
      .then(() => {
        sw.skipWaiting()
      }),
  )
}

/** @param {ExtendableEvent} event */
function activateListener(event) {
  event.waitUntil(
    caches.keys().then(async (keys) => {
      // delete old caches
      for (const key of keys) {
        if (key !== ASSETS) await caches.delete(key)
      }

      sw.clients.claim()
    }),
  )
}

/**
 * Fetch the asset from the network and store it in the cache.
 * Fall back to the cache if the user is offline.
 * @param {RequestInfo} request
 */
async function fetchAndCache(request) {
  const cache = await caches.open(`offline${version}`)

  try {
    const response = await fetch(request)
    cache.put(request, response.clone())
    return response
  } catch (error) {
    const response = await cache.match(request)
    if (response) return response

    throw error
  }
}

/** @param {FetchEvent} event */
function fetchListener(event) {
  if (event.request.method !== 'GET' || event.request.headers.has('range')) {
    return
  }

  const url = new URL(event.request.url)

  // don't try to handle e.g. data: URIs
  const isHttp = url.protocol.startsWith('http')
  const isDevelopmentServerRequest =
    url.hostname === sw.location.hostname && url.port !== sw.location.port
  const isStaticAsset =
    url.host === sw.location.host && staticAssets.has(url.pathname)
  const skipBecauseUncached =
    event.request.cache === 'only-if-cached' && !isStaticAsset

  if (isHttp && !isDevelopmentServerRequest && !skipBecauseUncached) {
    event.respondWith(
      (async () => {
        // always serve static files and bundler-generated assets from cache.
        // if your application has other URLs with data that will never change,
        // set this variable to true for them and they will only be fetched once.
        const cachedAsset = isStaticAsset && (await caches.match(event.request))

        // for pages, you might want to serve a build `service-worker-index.html` file.
        // It's not right for every app, but if it's right for yours then uncomment this section
        /*
        if (!cachedAsset && url.origin === sw.origin && routes.find(route => route.pattern.test(url.pathname))) {
          return caches.match('/service-worker-index.html');
        }
        */
        return cachedAsset || fetchAndCache(event.request)
      })(),
    )
  }
}

sw.addEventListener('install', installListener)
sw.addEventListener('activate', activateListener)
sw.addEventListener('fetch', fetchListener)
